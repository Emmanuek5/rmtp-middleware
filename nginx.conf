load_module /usr/lib/nginx/modules/ngx_rtmp_module.so;
worker_processes 1;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

 events {
    worker_connections 1024;
}

# RTMP configuration
rtmp {
    server {
        listen 1935;
        chunk_size 4000;

        # Main application for receiving streams
        application live {
            live on;
            record off;
            # Generate HLS directly from the live app
            hls on;
            hls_path /tmp/hls;
            hls_fragment 3;
            hls_playlist_length 60;
            # Improve reliability of RTMP pushes (disabled if module lacks support)
            # push_reconnect 1s;
            
            # Allow publishing from anywhere (configure security as needed)
            allow publish all;
            allow play all;

            # Dynamic destinations will be injected between these markers
            # DESTINATIONS_START
            # DESTINATIONS_END
            
            # Dynamic recording FFmpeg commands will be injected between these markers
            # RECORDING_START
            exec_ffmpeg ffmpeg -i rtmp://localhost/live/$name -c copy -f segment -segment_time 300 -segment_format mp4 /streams/$name/$name-%Y%m%d-%H%M%S.mp4;
            # RECORDING_END
            
            # Enable statistics
            on_publish http://localhost:8080/api/rtmp/on_publish;
            on_publish_done http://localhost:8080/api/rtmp/on_publish_done;
            on_play http://localhost:8080/api/rtmp/on_play;
            on_play_done http://localhost:8080/api/rtmp/on_play_done;
            
            # Dynamic cleanup commands (e.g., process kills) will be injected between these markers
            # CLEANUP_START
            # on_done exec_kill quit ffmpeg_pid;
            # CLEANUP_END
        }

        # HLS output handled in 'live' application above

        # DASH output application
        application dash {
            live on;
            dash on;
            dash_path /tmp/dash;
            dash_fragment 3;
            dash_playlist_length 60;
            
            allow publish 127.0.0.1;
            deny publish all;
            allow play all;
        }
    }
}

# HTTP configuration
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Server block for serving HLS/DASH and web interface
    server {
        listen 80;
        server_name localhost;

        # CORS headers for video streaming
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';

        # HLS streaming
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            expires -1;
            add_header Cache-Control no-cache;
        }

        # DASH streaming  
        location /dash {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }
            root /tmp;
            expires -1;
            add_header Cache-Control no-cache;
        }

        # RTMP statistics
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }
        location /stat.xsl {
            root /usr/share/nginx/html;
        }

        # Proxy Next.js app
        location / {
            proxy_pass http://localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # API endpoints
        location /api {
            proxy_pass http://localhost:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
